-- Anime Lists Table
CREATE TABLE IF NOT EXISTS public.anime_lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    anime_id INTEGER NOT NULL,
    title TEXT NOT NULL,
    image_url TEXT,
    type TEXT,
    episodes INTEGER DEFAULT 0,
    status TEXT DEFAULT 'plan_to_watch',
    score INTEGER DEFAULT 0,
    year INTEGER,
    studio TEXT,
    mal_score NUMERIC(3, 2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    UNIQUE(user_id, anime_id)
);

-- Enable Row-Level Security
ALTER TABLE public.anime_lists ENABLE ROW LEVEL SECURITY;

-- Create Policies
-- Policy for users to select only their own lists
CREATE POLICY "Users can view their own anime lists" 
ON public.anime_lists 
FOR SELECT 
USING (auth.uid() = user_id);

-- Policy for users to insert their own lists
CREATE POLICY "Users can insert their own anime lists" 
ON public.anime_lists 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Policy for users to update their own lists
CREATE POLICY "Users can update their own anime lists" 
ON public.anime_lists 
FOR UPDATE 
USING (auth.uid() = user_id);

-- Policy for users to delete their own lists
CREATE POLICY "Users can delete their own anime lists" 
ON public.anime_lists 
FOR DELETE 
USING (auth.uid() = user_id);

-- Create Function to update timestamp on edit
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create Trigger for updated_at
CREATE TRIGGER set_updated_at
BEFORE UPDATE ON public.anime_lists
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at(); 